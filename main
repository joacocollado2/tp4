import io

from clase import *
import os.path
import pickle


def validar_entre(sup, inf, msj):
    num = int(input(msj))
    while num < inf or num > sup:
        num = int(input('Error...' + msj))
    return num


def menu():
    print("1. Crear archivo")
    print("2. Cargar datos de envios en el archivo")
    print("3. Mostrar los envios grabados")
    print("4. Mostrar envios segun codigo postal")
    print("5. ")
    print("6. ")
    print("7. ")
    print("8. ")
    print("9. Salir")

    op = validar_entre(9, 1, 'Ingrese una opción entre 1 y 9:')
    return op


def generar_archivo_binario(fdt, fdb):
    if not os.path.exists(fdt):
        print("El archivo", fdt, "no existe...")
        print("Controle y vuelva por aquí...")
        return

    if os.path.exists(fdb):
        print('ADVERTENCIA: el archivo', fdb, 'ya existe y sera sobreescrito.')
        respuesta = input('Desea continuar? (si/no):')
        if respuesta != 'si':
            print('Operacion cancelada.')
            return

    # apertura del archivo de entrada...
    datos = open(fdt, "rt")

    ts = datos.readline()

    hd = datos.readline()

    m = open(fdb, "wb")
    for linea in datos:
        d = linea.split(",")
        cp = d[0]
        de = d[1]
        te = int(d[2])
        fp = int(d[3])
        env = Envio(cp, de, te, fp)
        pickle.dump(env, m)

    datos.close()
    m.close()


def mostrar_archivo_binario(fdb):
    if not os.path.exists(fdb):
        print("El archivo", fdb, "no existe...")
        print("Controle y vuelva por aquí...")
        return

    print("Listado general de envios...")
    c = 0
    m = open(fdb, "rb")
    t = os.path.getsize(fdb)
    while m.tell() < t:
        env = pickle.load(m)
        print(env)
        c += 1
    m.close()
    print("Se listaron", c, "registros...")


def validar_mayor_que(lim):
    n = int(input('Ingrese el numero:'))
    while n < lim:
        print('Ingrese un dato valido...')
        n = int(input('Ingrese el numero:'))
    return n


def cargar_datos(fdb):
    e = []
    m = open(fdb, 'ab')
    print('Cantidad de envios:')
    n = validar_mayor_que(0)

    print('Ingrese los datos de los envios')
    for i in range(n):
        print('Codigo postal')
        cp = input('Ingrese:')

        print('Direccion de envio')
        direccion = input('Ingrese:')

        print('Tipo de envio:')
        tipo = validar_mayor_que(0)

        print('Forma de pago:')
        forma_pago = validar_mayor_que(0)

        envio = Envio(cp, direccion, tipo, forma_pago)
        pickle.dump(envio, m)
        e.append(envio)

    m.close()

    return e


def buscar(fdb, m, x):
    t = os.path.getsize(fdb)

    fp_inicial = m.tell()
    m.seek(0, io.SEEK_SET)

    posicion = -1
    while m.tell() < t:
        fp = m.tell()
        env = pickle.load(m)
        if env.codigo == x:
            posicion = fp
            break
    m.seek(fp_inicial, io.SEEK_SET)
    return posicion


def buscar_cp(fdb):
    ac = 0
    if not os.path.exists(fdb):
        print('El archivo', fdb, 'no existe')
        return

    m = open(fdb, 'rb')

    print('Codigo postal a buscar: ')
    cp = input('Ingrese el codigo postal a buscar:')
    for line in m:
        pos = buscar(fdb, m, cp)
        if pos != -1:
            m.seek(pos, io.SEEK_SET)
            envio = pickle.load(m)
            print('Envio encontrado')
            print('Se encontrararon los envios:', envio, 'en la posicion:', line)
            ac += 1
        else:
            print('El codigo postal que busca no se encontro.')
    print('Cantidad de envios con ese codigo postal:', ac)
    m.close()


def buscar_2(fdb, m, x):
    t = os.path.getsize(fdb)

    fp_inicial = m.tell()
    m.seek(0, io.SEEK_SET)

    posicion = -1
    while m.tell() < t:
        fp = m.tell()
        env = pickle.load(m)
        if env.direccion == x:
            posicion = fp
            break
    m.seek(fp_inicial, io.SEEK_SET)
    return posicion


def buscar_direccion(fdb):
    if not os.path.exists(fdb):
        print('El archivo', fdb, 'no existe')
        return

    m = open(fdb, 'rb')

    print('Direccion de envio a buscar: ')
    direc = input('Ingrese la direccion de envio a buscar:')
    pos = buscar_2(fdb, m, direc)
    if pos != -1:
        m.seek(pos, io.SEEK_SET)
        envio = pickle.load(m)
        print('Envio encontrado')
        print(envio)
    else:
        print('El codigo postal que busca no se encontro.')

    m.close()


def count(tipo_envio, forma_pago):
    conteo = [[0] * 7 for f in range(2)]
    n = len(tipo_envio)
    for i in range(n):
        f = tipo_envio[i]
        c = forma_pago[i]
        conteo[f][c] += 1
    return conteo


def display_count(conteo):
    filas, columnas = len(conteo), len(conteo[0])
    print()
    print('Conteo de tipos de envio y forma de pago')
    for f in range(filas):
        for c in range(columnas):
            if conteo[f][c] != 0:
                print('Tipo de envio', f, '\tForma', c, '\tCantidad:', conteo[f][c])
                
                
def principal():
    fdt = "envios-tp4.csv"
    fdb = "envios-tp4.dat"
    op = 0
    e = []
    while op != 9:
        op = menu()

        if op == 1:
            generar_archivo_binario(fdt, fdb)
            print("Terminado...")
        if op == 2:
            cargar_datos(fdb)
        if op == 3:
            mostrar_archivo_binario(fdb)
        if op == 4:
            buscar_cp(fdb)
        if op == 5:
            buscar_direccion(fdb)
        if op == 6:
            display_count(conteo)


if __name__ == "__main__":
    principal()
