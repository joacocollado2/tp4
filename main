from clase import *
import os.path
import pickle


def validar_entre(sup, inf, msj):
    num = int(input(msj))
    while num < inf or num > sup:
        num = int(input('Error...' + msj))
    return num


def menu():
    print("1. Crear archivo")
    print("2. Cargar datos de envios en el archivo")
    print("3. Mostrar los envios grabados")
    print("4. Mostrar envios segun codigo postal")
    print("5. ")
    print("6. ")
    print("7. ")
    print("8. ")
    print("9. Salir")

    op = validar_entre(9, 1, 'Ingrese una opción entre 1 y 9:')
    return op


def generar_archivo_binario(fdt, fdb):
    if not os.path.exists(fdt):
        print("El archivo", fdt, "no existe...")
        print("Controle y vuelva por aquí...")
        return

    if os.path.exists(fdb):
        print('ADVERTENCIA: el archivo', fdb, 'ya existe y sera sobreescrito.')
        respuesta = input('Desea continuar? (si/no):')
        if respuesta != 'si':
            print('Operacion cancelada.')
            return

    # apertura del archivo de entrada...
    datos = open(fdt, "rt")

    ts = datos.readline()

    hd = datos.readline()

    m = open(fdb, "wb")
    for linea in datos:
        d = linea.split(",")
        if len(d) < 4:
            cp = d[0]
            de = d[1]
            te = int(d[2])
            fp = int(d[3])
            env = Envio(cp, de, te, fp)
            pickle.dump(env, m)

    datos.close()
    m.close()


def mostrar_archivo_binario(fdb):
    if not os.path.exists(fdb):
        print("El archivo", fdb, "no existe...")
        print("Controle y vuelva por aquí...")
        return

    print("Listado general de envios...")
    c = 0
    m = open(fdb, "rb")
    t = os.path.getsize(fdb)
    while m.tell() < t:
        env = pickle.load(m)
        print(env)
        c += 1
    m.close()
    print("Se listaron", c, "registros...")


def validar_mayor_que(lim):
    n = int(input('Ingrese el numero:'))
    while n < lim:
        print('Ingrese un dato valido...')
        n = int(input('Ingrese el numero:'))
    return n


def cargar_datos(fdb):
    e = []
    m = open(fdb, 'ab')
    print('Cantidad de envios:')
    n = validar_mayor_que(0)

    print('Ingrese los datos de los envios')
    for i in range(n):
        print('Codigo postal')
        cp = input('Ingrese:')

        print('Direccion de envio')
        direccion = input('Ingrese:')

        print('Tipo de envio:')
        tipo = validar_mayor_que(0)

        print('Forma de pago:')
        forma_pago = validar_mayor_que(0)

        envio = Envio(cp, direccion, tipo, forma_pago)
        pickle.dump(envio, m)
        e.append(envio)

    m.close()

    return e


def mostrar_datos(e):
    if len(e) == 0:
        print('No se cargaron datos')
        return

    print('Listado de envios:')
    for envio in e:
        print(envio) #verificar si se muestra el pais


def buscar_cp(e, x):
    ac = 0
    if len(e) == 0:
        print('No se cargaron datos...')

    x = input('Ingrese el codigo postal a buscar')
    print('Listado de envios con codigos postales iguales a:', x)
    for envio in e:
        if e.codigo == x:
            ac += 1
            print(envio)
            print('Cantidad de envios mostrados', ac)


def principal():
    fdt = "envios-tp4"
    fdb = "envios-tp4.dat"
    op = 0
    e = []
    while op != 9:
        op = menu()

        if op == 1:
            generar_archivo_binario(fdt, fdb)
            print("Terminado...")
            mostrar_archivo_binario(fdb)
        if op == 2:
            cargar_datos(fdb)
        if op == 3:
            mostrar_datos(e)
        if op == 4:
            cp2 = input('Ingrese el codigo postal a buscar:')
            buscar_cp(e, cp2)


if __name__ == "__main__":
    principal()
