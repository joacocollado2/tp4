import io
from clase import *
import os.path
import pickle


def validar_entre(sup, inf, msj):
    num = int(input(msj))
    while num < inf or num > sup:
        num = int(input('Error...' + msj))
    return num


def menu():
    print("1. Crear archivo")
    print("2. Cargar datos de envios en el archivo")
    print("3. Mostrar los envios grabados")
    print("4. Mostrar envios segun codigo postal")
    print("5. ")
    print("6. ")
    print("7. ")
    print("8. ")
    print("9. Salir")

    op = validar_entre(9, 1, 'Ingrese una opción entre 1 y 9:')
    return op


def generar_archivo_binario(fdt, fdb):
    if not os.path.exists(fdt):
        print("El archivo", fdt, "no existe...")
        print("Controle y vuelva por aquí...")
        return

    if os.path.exists(fdb):
        print('ADVERTENCIA: el archivo', fdb, 'ya existe y sera sobreescrito.')
        respuesta = input('Desea continuar? (si/no):')
        if respuesta != 'si':
            print('Operacion cancelada.')
            return

    # apertura del archivo de entrada...
    datos = open(fdt, "rt")

    ts = datos.readline()

    hd = datos.readline()

    m = open(fdb, "wb")
    for linea in datos:
        d = linea.split(",")
        cp = d[0]
        de = d[1]
        te = int(d[2])
        fp = int(d[3])
        env = Envio(cp, de, te, fp)
        pickle.dump(env, m)

    datos.close()
    m.close()


def mostrar_archivo_binario(fdb):
    if not os.path.exists(fdb):
        print("El archivo", fdb, "no existe...")
        print("Controle y vuelva por aquí...")
        return

    print("Listado general de envios...")
    c = 0
    m = open(fdb, "rb")
    t = os.path.getsize(fdb)
    while m.tell() < t:
        env = pickle.load(m)
        print(env)
        c += 1
    m.close()
    print("Se listaron", c, "registros...")


def validar_mayor_que(lim):
    n = int(input('Ingrese el numero:'))
    while n < lim:
        print('Ingrese un dato valido...')
        n = int(input('Ingrese el numero:'))
    return n


def cargar_datos(fdb):
    e = []
    m = open(fdb, 'ab')
    print('Cantidad de envios:')
    n = validar_mayor_que(0)

    print('Ingrese los datos de los envios')
    for i in range(n):
        print('Codigo postal')
        cp = input('Ingrese:')

        print('Direccion de envio')
        direccion = input('Ingrese:')

        print('Tipo de envio:')
        tipo = validar_mayor_que(0)

        print('Forma de pago:')
        forma_pago = validar_mayor_que(0)

        envio = Envio(cp, direccion, tipo, forma_pago)
        pickle.dump(envio, m)
        e.append(envio)

    m.close()

    return e


def buscar_cp(fdb):
    ac = 0

    if not os.path.exists(fdb):
        print('El archivo', fdb, 'no existe')
        return

    m = open(fdb, 'rb')
    cp = input('Ingrese el código postal a buscar: ')
    t = os.path.getsize(fdb)

    while m.tell() < t:
                envio = pickle.load(m)
                if envio.codigo == cp:
                    print('Envio encontrado:', envio)
                    ac += 1

    if ac == 0:
        print()
        print('No se encontraron envíos con el código postal:', cp)

    else:
        print()
        print('Cantidad de envíos con ese código postal:', ac)


def buscar_2(fdb, m, x):
    t = os.path.getsize(fdb)

    fp_inicial = m.tell()
    m.seek(0, io.SEEK_SET)

    posicion = -1
    while m.tell() < t:
        fp = m.tell()
        env = pickle.load(m)
        if env.direccion == x:
            posicion = fp
            break
    m.seek(fp_inicial, io.SEEK_SET)
    return posicion


def buscar_direccion(fdb):
    if not os.path.exists(fdb):
        print('El archivo', fdb, 'no existe')
        return

    m = open(fdb, 'rb')

    print('Direccion de envio a buscar: ')
    direc = input('Ingrese la direccion de envio a buscar:')
    pos = buscar_2(fdb, m, direc)
    if pos != -1:
        m.seek(pos, io.SEEK_SET)
        envio = pickle.load(m)
        print('Envio encontrado')
        print(envio)
    else:
        print('El codigo postal que busca no se encontro.')

    m.close()


def conteo(fdb):
    if not os.path.exists(fdb):
        print('No se encontro el archivo', fdb)
        return

    tbm = os.path.getsize(fdb)
    m = open(fdb, 'rb')

    conteo = [[0] * 7 for f in range(3)]

    while m.tell() < tbm:
        envio = pickle.load(m)
        f = envio.tipo_envio
        c = envio.forma_pago

        if 0 <= f < 7 and 0 <= c <= 2:
            conteo[c][f] += 1

    m.close()
    return conteo


def generar_matriz(conteo):
    print('Conteo de envios por tipo de envio y forma de pago:')
    for f in range(1, 3):
        for c in range(7):
            if conteo[f][c] != 0:
                print('Tipo de envio', c, '\tForma', f, '\tCantidad:', conteo[f][c])


def totales_fila(cant):
    filas, columnas = len(cant), len(cant[0])
    print('Total de envios por tipo de envios:')

    for f in range(1, filas):
        ac = 0
        for c in range(columnas):
            ac += cant[f][c]
        print('Forma de pago: ', f, 'Cantidad total vendida:', ac)


def totales_columna(cant):
    filas, columnas = len(cant), len(cant[0])
    print('Total de envios por formas de pago:')
    for c in range(columnas):
        ac = 0
        for f in range(1, filas):
          ac += cant[f][c]
        print('Tipo de envio:', c, 'Cantidad total vendida:', ac)


def shellsort(envios):
    n = len(envios)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = envios[i]
            j = i
            while j >= gap and envios[j - gap].codigo > temp.codigo:
                envios[j] = envios[j - gap]
                j -= gap
            envios[j] = temp
        gap //= 2


def calcular_importe_promedio(fdb):
    if not os.path.exists(fdb):
        print("El archivo", fdb, "no existe...")
        return None

    m = open(fdb, 'rb')
    total_importe = 0
    cantidad = 0

    t = os.path.getsize(fdb)
    while m.tell() < t:
        envio = pickle.load(m)
        total_importe += envio.importe_final()
        cantidad += 1

    m.close()

    if cantidad == 0:
        return 0
    return total_importe / cantidad


def procesar_envios_superiores_al_promedio(fdb):
    promedio = calcular_importe_promedio(fdb)
    if promedio is None:
        print("No se pudo calcular el importe promedio.")
        return

    print(f"Importe promedio: {promedio}")

    envios_mayores = []

    m = open(fdb, 'rb')
    t = os.path.getsize(fdb)

    while m.tell() < t:
        envio = pickle.load(m)
        if envio.importe_final() > promedio:
            envios_mayores.append(envio)

    m.close()

    if len(envios_mayores) == 0:
        print("No hay envíos con importe mayor al promedio.")
        return

    shellsort(envios_mayores)

    print("Envíos con importe mayor al promedio, ordenados por código postal:")
    for envio in envios_mayores:
        print(envio)


def principal():
    fdt = "envios-tp4.csv"
    fdb = "envios-tp4.dat"
    op = 0
    conte = conteo(fdb)
    while op != 9:
        op = menu()

        if op == 1:
            generar_archivo_binario(fdt, fdb)
            print("Terminado...")
        if op == 2:
            cargar_datos(fdb)
        if op == 3:
            mostrar_archivo_binario(fdb)
        if op == 4:
            buscar_cp(fdb)
        if op == 5:
            buscar_direccion(fdb)
        if op == 6:
            if conte:
                generar_matriz(conte)
        if op == 7:
            totales_fila(conte)
            totales_columna(conte)
        if op == 8:
            procesar_envios_superiores_al_promedio(fdb)


if __name__ == "__main__":
    principal()
